//
// Created by ADMIN on 02-Mar-24.
//

#ifndef MOTION_UNITSTATSFACTORY_HPP
#define MOTION_UNITSTATSFACTORY_HPP


#include <unordered_map>
#include "UnitData.hpp"

/*
 * id generation options
 * a. in class
 * b. from database
 * c. generated by user
 * d. in class, but unit factory takes responsibility for converting filename to id;
 * */

/*
 * faction
 * |- units*/
/*
 * unit factory could register faction->unit at startup
 * then there is an issue of having the game as a library (workdir could be any)
 * */
//class UnitStatsFactory {
//  static std::unordered_map<uint64_t, UnitData> units;
//  static id_t lastID;
//
//  constexpr static UnitData basicUnit {
//      .name ="basic",
//      .mass = 70,
//      .speed = 1.33, // avg human speed
//      .unitRadius = 0.30,
//      .attackRadius = 0.50,
//
//      .cost = 100,
//      .soldierCount = 100,
//      .hitPoints = 100,
//      .attack = 20,
//      .defence = 5,
//  };
//public:
//
//  static const UnitData & getBasicUnit() {
//    return basicUnit;
//  }
//  /*
//   * must store somewhere provided id (aka)
//   * */
//  [[nodiscard]] static id_t record(UnitData && stats) {
//    id_t id = lastID;
//    units.insert(std::make_pair(id, stats));
//    ++lastID;
//    return id;
//  }
//  static const UnitData & getSoldier (id_t id) {
//    return units.at(id);
//  }
//};
//
//uint64_t UnitStatsFactory::lastID = 0;
#endif //MOTION_UNITSTATSFACTORY_HPP
